name: $(Date:yyyyMMdd).$(Rev:.r)

trigger:
  batch: true
  branches:
    include:
      - master
  paths:
    include:
      - Source/*
      - Plugins/*

variables:
    - name: Pipeline.EngineVersion 
      value: '0.0.0.0'
    - name: Pipeline.ProjectVersion
      value: '0.0.0.0'
    - name:  Pipeline.GameProjectRoot
      value: '.'
    - name: Pipeline.ArchivePath
      value: '$(Pipeline.GameProjectRoot)Intermediate/BuildArchive/'
    - name: Pipeline.bNugetVersionAlreadyPushed
      value: 'false'
    - name: Pipeline.NuspecFilePath
      value: '.nuget/HorizonUIPluginDemo.nuspec'
    - name: Pipeline.NugetLocalFeedPath
      value: '\\\\hsgame\\UE4-Packaged-build\\nuget\\hsgame-local\\HorizonPlugin'
    - name: Pipeline.NugetAzureDevopsFeedName
      value: 'UE4HorizonPlugin'
    - name: Pipeline.NugetOutputDirectory
      value: '$(System.ArtifactsDirectory)/Nuget'

# ==================settable variable at queue time=============
#   PipelineInput.bCleanSCM: true

resources:
  repositories:
    - repository: templates
      type: git
      name: UEHorizonBuildScript/azure-pipelines-template

jobs:
    #- ${ if eq(variables['Pipeline.bBuildWin64'], 'true') }:
    - template: job/build-game-editor.yml@templates
      parameters:
          name: 'Build_Win64_GameEditor'
          group: 'ue4-build-var-win-group'
          pool: 'Default'
          platform: 'win64'

    - template: job/build-game-editor.yml@templates
      parameters:
          name: 'Build_Mac_GameEditor'
          group: 'ue4-build-var-mac-group'
          pool: 'Default-MacOS'
          platform: 'mac'

    - template: job/create-and-push-nuget-package.yml@templates
      parameters:
          name: 'Create_And_Push_Nuget_Package'
          group: 'ue4-build-var-win-group'
          pool: 'Default'
          platform: 'win64'
          dependsOn:
            - 'Build_Win64_GameEditor'
            - 'Build_Mac_GameEditor'

    # - job: 'Create_And_Push_Nuget_Package'
    #   variables:
    #     - group: 'ue4-build-var-win-group'  # variable group
    #   timeoutInMinutes: 120  
    #   pool:
    #     name: 'Default'
    #     demands:
    #       - UE4_BUILD_TOOLS
    #   dependsOn:
    #     - 'Build_Win64_GameEditor'
    #     - 'Build_Mac_GameEditor'

    #   steps:
    #     - checkout: self # self represents the repo where the initial Pipelines YAML file was found
    #       lfs: true
    #       submodules: false
    #       clean: false

          
    #     - template: step/set-engine-and-game-version.yml@templates

    #     # echo parameters
    #     - powershell: |   
    #         echo "Pipeline.UnrealEngineRoot: $(Pipeline.UnrealEngineRoot)"
    #         echo "Pipeline.GameProjectRoot: $(Pipeline.GameProjectRoot)"
    #         echo "Pipeline.ArchivePath: $(Pipeline.ArchivePath)"
    #         echo "Pipeline.EngineVersion: $(Pipeline.EngineVersion)"
    #         echo "Pipeline.ProjectVersion: $(Pipeline.ProjectVersion)"
    #         echo "Pipeline.bNugetVersionAlreadyPushed: $(Pipeline.bNugetVersionAlreadyPushed)"

    #         echo "Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)"
    #         echo "Build.BuildId: $(Build.BuildId)"
    #         echo "Build.BuildNumber: $(Build.BuildNumber)"
    #         echo "Build.DefinitionVersion: $(Build.DefinitionVersion)"
    #         echo "Build.SourceBranchName: $(Build.SourceBranchName)"
    #         echo "Build.SourceVersion: $(Build.SourceVersion)"
    #         echo "System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
    #       displayName: 'build-game-editor.yml: echo parameters'
    #       failOnStderr: true

        
    #     - task: DownloadPipelineArtifact@1
    #       inputs:
    #         buildType: 'current'
    #         downloadPath: '$(System.ArtifactsDirectory)' 

    #     - powershell: |
    #         $basePath="$(System.ArtifactsDirectory)/LocalBuild"
    #         $outputDirectory="$(System.ArtifactsDirectory)/Nuget"
    #         # rm ${basePath} -r -fo -ErrorAction SilentlyContinue
    #         # rm ${outputDirectory} -r -fo -ErrorAction SilentlyContinue
    #         mkdir -p ${basePath}

    #         $dropWin64="$(System.ArtifactsDirectory)/drop_win64/"
    #         if ( (Test-Path $dropWin64) -eq $True)
    #         {
    #           cp $dropWin64/* ${basePath} -force -recurse
    #         }
    #         $dropMac="$(System.ArtifactsDirectory)/drop_win64/"
    #         if ((Test-Path $dropMac) -eq $True)
    #         {
    #           cp $dropMac/* ${basePath} -force -recurse
    #         }
    #         $cmd="nuget pack $(Pipeline.NuspecFilePath) -Verbosity detailed -ForceEnglishOutput " +
    #             "-BasePath ${basePath} -OutputDirectory ${outputDirectory} -Version $(Pipeline.ProjectVersion)"
    #         echo ${cmd}
    #         iex $cmd
    #       displayName: 'Create Nuget Package for GameEditor'
    #       failOnStderr: true
    #       condition: and(succeeded(), eq(variables['Pipeline.bNugetVersionAlreadyPushed'], false ))



    #     - powershell: |
    #         $outputDirectory="$(System.ArtifactsDirectory)/Nuget"
    #         nuget init ${outputDirectory} $(Pipeline.NugetLocalFeedPath) -ForceEnglishOutput
    #       displayName: 'NuGet push to local feed'
    #       failOnStderr: true
    #       condition: and(succeeded(), 
    #                   eq(variables['Pipeline.bNugetVersionAlreadyPushed'], false ), 
    #                   ne(variables['Pipeline.NugetLocalFeedPath'], '')) 



    #     - task: NuGetCommand@2
    #       displayName: 'NuGet push'
    #       inputs:
    #         command: 'push'
    #         packagesToPush: '$(Pipeline.NugetOutputDirectory)/*.nupkg;
    #                         !$(Pipeline.NugetOutputDirectory)/*.symbols.nupkg'
    #         publishVstsFeed: $(Pipeline.NugetAzureDevopsFeedName)
    #       condition: and(succeeded(), eq(variables['Pipeline.bNugetVersionAlreadyPushed'], false))
          
    #     - bash: | 
    #         pushd $(Pipeline.GameProjectRoot)/
    #           tagName="editor/hsgame/$(Pipeline.ProjectVersion)"
    #           git tag ${tagName} $(Build.SourceVersion)
    #           git push origin ${tagName} 
    #         popd
    #       displayName: 'CreateTag and push to remote'
    #       failOnStderr: false
    #       condition: and(succeeded(), eq(variables['Pipeline.bNugetVersionAlreadyPushed'], false ))

    #     - task: PublishPipelineArtifact@0
    #       inputs:
    #         artifactName: 'drop_nuget' 
    #         targetPath: $(Pipeline.NugetOutputDirectory)
    #       condition: and(succeeded(), eq(variables['Pipeline.bNugetVersionAlreadyPushed'], false )) 